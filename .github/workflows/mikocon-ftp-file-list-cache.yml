name: retrieve file list on mikocon ftp server

on:
  schedule:
    # run on UTC+0 19:00PM every Sunday and Thursday == 逢周一和周五的凌晨三点
    - cron: '0 19 * * 0,4'
  # also allow you to run this workflow manually
  workflow_dispatch:
    inputs:
      force_flag:
        description: 'force update?(y/n, default is n)'
        required: false
        default: 'n'

jobs:
  job1:
    runs-on: ubuntu-latest
    outputs:
      trigger_flag: ${{ steps.result.outputs.trigger }}
    steps:
      - name: download this repo
        uses: actions/checkout@v3
      - name: install packages
        run: |
          sudo apt-get update -y
          sudo apt-get install -y unzip
      - name: check previous date stamp
        run: |
          TEMP_VAR=$(unzip -l rawdata.zip | grep NEW.raw.txt)
          PREVIOUS_DATE=$(echo $TEMP_VAR | awk '{print $2}')
          echo "PREVIOUS_DATE=$PREVIOUS_DATE" >> $GITHUB_ENV
      - name: check current date stamp
        run: |
          curl https://www.mikocon.com/serverupdate/ > /tmp/mikocon-serverupdate.txt
          sed -i 's|<br>|\n|g' /tmp/mikocon-serverupdate.txt
          sed -i 's|<[^>]*>||g' /tmp/mikocon-serverupdate.txt
          CURRENT_DATE=$(tail -n 1 /tmp/mikocon-serverupdate.txt | awk '{print $3}')
          echo "CURRENT_DATE=$CURRENT_DATE" >> $GITHUB_ENV
      - name: compare date
        id: result
        run: |
          previous_date_stamp=$(date -d ${{ env.PREVIOUS_DATE }} +%s)
          current_date_stamp=$(date -d ${{ env.CURRENT_DATE }} +%s)
          if [ $current_date_stamp -gt $previous_date_stamp ]; then
              trigger="true"
              echo "trigger=true" >> $GITHUB_OUTPUT
          else
              trigger="false"
              echo "trigger=false" >> $GITHUB_OUTPUT
          fi

          if [ ${{ github.event.inputs.force_flag }} == 'y' ]; then
              trigger="true"
              echo "trigger=true" >> $GITHUB_OUTPUT
          fi
          echo trigger=$trigger
      - run: echo "🍏 This job's status is ${{ job.status }}."

  job2:
    needs: job1
    if: needs.job1.outputs.trigger_flag == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: install packages
        run: |
          sudo apt-get update -y
          sudo apt-get install -y        \
                      lftp \
                      openssl
          cd ${{ github.workspace }}
      - name: retrieve NEW file list
        run: |
          mkdir -p ~/.config/lftp/mikocon.com/
          # important: 务必将错误流重定向到/dev/null进行销毁(2>/dev/null)，避免在output中泄露服务器地址。
          # important: 必须使用github的secret功能保存账号密码，不要把账号密码直接写在脚本中。
          openssl s_client -connect ${{ secrets.MikoconFtp }} -starttls ftp </dev/null 2>/dev/null | openssl x509 >~/.config/lftp/mikocon.com/mikocon.crt
          chmod 0600 ~/.config/lftp/mikocon.com/mikocon.crt
          echo -e "set ftp:charset shift-jis\nset ftp:use-feat false\nset ftp:nop-interval 60\nset ssl:ca-file ~/.config/lftp/mikocon.com/mikocon.crt\nset net:idle 1h\nset xfer:temp-file-name *.part\nset ftp:ssl-auth TLS\nset ftp:use-utf8 yes\n" >~/.config/lftp/mikocon.com/rc
          LFTP_HOME=~/.config/lftp/mikocon.com/ lftp -c "open ${{ secrets.MikoconEntry }}; ls" || exit 2
          LFTP_HOME=~/.config/lftp/mikocon.com/ lftp -c "open ${{ secrets.MikoconEntry }}; find -l NEW >~/NEW.raw.txt" &
          while [ -n "$(pgrep lftp 2>/dev/null)" ]; do echo total lines:`wc -l ~/NEW.raw.txt`; sleep 60; done
          echo total lines:`wc -l ~/NEW.raw.txt`
          cd ${{ github.workspace }}
      - name: temp save output file
        uses: actions/upload-artifact@v3
        with:
          name: NEW.raw.txt
          path: ~/NEW.raw.txt
          retention-days: 5
      - run: echo "🍏 This job's status is ${{ job.status }}."

  job3:
    needs: job1
    if: needs.job1.outputs.trigger_flag == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: install packages
        run: |
          sudo apt-get update -y
          sudo apt-get install -y        \
                      lftp \
                      openssl
          cd ${{ github.workspace }}
      - name: retrieve ARCHIVE file list
        run: |
          mkdir -p ~/.config/lftp/mikocon.com/
          # important: 务必将错误流重定向到/dev/null进行销毁(2>/dev/null)，避免在output中泄露服务器地址。
          # important: 必须使用github的secret功能保存账号密码，不要把账号密码直接写在脚本中。
          openssl s_client -connect ${{ secrets.MikoconFtp }} -starttls ftp </dev/null 2>/dev/null | openssl x509 >~/.config/lftp/mikocon.com/mikocon.crt
          chmod 0600 ~/.config/lftp/mikocon.com/mikocon.crt
          echo -e "set ftp:charset shift-jis\nset ftp:use-feat false\nset ftp:nop-interval 60\nset ssl:ca-file ~/.config/lftp/mikocon.com/mikocon.crt\nset net:idle 1h\nset xfer:temp-file-name *.part\nset ftp:ssl-auth TLS\nset ftp:use-utf8 yes\n" >~/.config/lftp/mikocon.com/rc
          LFTP_HOME=~/.config/lftp/mikocon.com/ lftp -c "open ${{ secrets.MikoconEntry }}; ls" || exit 2
          LFTP_HOME=~/.config/lftp/mikocon.com/ lftp -c "open ${{ secrets.MikoconEntry }}; find -l ARCHIVE >~/ARCHIVE.raw.txt" &
          while [ -n "$(pgrep lftp 2>/dev/null)" ]; do echo total lines:`wc -l ~/ARCHIVE.raw.txt`; sleep 60; done
          echo total lines:`wc -l ~/ARCHIVE.raw.txt`
          cd ${{ github.workspace }}
      - name: temp save output file
        uses: actions/upload-artifact@v3
        with:
          name: ARCHIVE.raw.txt
          path: ~/ARCHIVE.raw.txt
          retention-days: 5
      - run: echo "🍏 This job's status is ${{ job.status }}."

  job4:
    needs: [job2, job3]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: install packages
        run: |
          sudo apt-get update -y
          sudo apt-get install -y zip
          cd ${{ github.workspace }}
      - name: download this repo
        uses: actions/checkout@v3
          #        with:
          #          repository: zerobikappa/actions-test
          #          path: actions-test
      - name: download new file
        uses: actions/download-artifact@v3
        with:
          path: ~/d/
      - name: replace old file
        run: |
          rm -fv *.zip NEW/* ARCHIVE/*
          find ~/d/
          find ~/d/ -type f -exec mv -fv "{}" . \;
          zip rawdata.zip *.raw.txt
          cat NEW.raw.txt | awk '$2!="-"{printf "%s\t%s\t",$4,$5; for(i=6; i<=NF; ++i)printf "%s",$i""FS; print ""}' | sort >NEW.sort.txt
          cat ARCHIVE.raw.txt | awk '$2!="-"{printf "%s\t%s\t",$4,$5; for(i=6; i<=NF; ++i)printf "%s",$i""FS; print ""}' | sort >ARCHIVE.sort.txt
          rm -v *.raw.txt
          split -l 1000 -d -a 5 --additional-suffix=.txt NEW.sort.txt NEW/NEW.
          split -l 1000 -d -a 5 --additional-suffix=.txt ARCHIVE.sort.txt ARCHIVE/ARCHIVE.
          rm -v *.sort.txt

      - name: auto push to repo
        uses: stefanzweifel/git-auto-commit-action@v4
          #        with:
          #          repository: ./actions-test
          #          file_pattern: '*/*.txt, *.zip'
      - run: echo "🍏 This job's status is ${{ job.status }}."
